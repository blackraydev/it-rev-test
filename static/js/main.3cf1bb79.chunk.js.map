{"version":3,"sources":["constants/globalValues.ts","constants/inputTypes.ts","constants/colors.ts","UI/Input/styles.ts","UI/Input/index.tsx","UI/Button/styles.ts","UI/Button/index.tsx","UI/Modal/styles.ts","UI/Modal/index.tsx","components/AuthBlock/styles.ts","components/AuthBlock/index.tsx","pages/MainPage/styles.ts","pages/MainPage/index.tsx","App.tsx","index.tsx"],"names":["GlobalValues","InputTypes","COLORS","InputWrapper","styled","div","Label","label","LIGHT_GRAY","Input","input","DEEP_BLUE","BG","WHITE","GRAY","PINK","value","onChange","placeholder","rules","type","maxLength","onKeyPress","e","digitsOnly","Number","key","preventDefault","TEXT","Button","button","LIGHT_PINK","onClick","disabled","ModalWrapper","MODAL_BG","Modal","ButtonsWrapper","children","onSubmit","onCancel","submitDisabled","LOGIN","CANCEL","BlockWrapper","OpenFormText","p","AuthBlock","useState","login","setLogin","password","setPassword","modalOpened","setModalOpened","useMemo","sumbitAuthHandler","useCallback","user","console","log","JSON","stringify","closeModalHandler","openModalHandler","target","PASSWORD","PageWrapper","MainPage","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3cf1bb79.chunk.js","sourcesContent":["export enum GlobalValues {\n  LOGIN = 'Login',\n  PASSWORD = 'Password',\n  CANCEL = 'Cancel',\n}\n","export enum InputTypes {\n  TEXT = 'text',\n  PASSWORD = 'password',\n}\n","export enum COLORS {\n  BG = 'rgb(20, 20, 30)',\n  PINK = 'rgb(230, 115, 140)',\n  LIGHT_PINK = 'rgb(240, 125, 150)',\n  DEEP_BLUE = 'rgb(30, 30, 40)',\n  GRAY = 'rgb(135, 135, 145)',\n  LIGHT_GRAY = 'rgb(200, 200, 210)',\n  WHITE = '#fff',\n  MODAL_BG = 'rgba(0, 0, 0, 0.3)',\n}\n","import styled from 'styled-components';\nimport { COLORS } from '../../constants/colors';\n\nexport const InputWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n`;\n\nexport const Label = styled.label`\n  color: ${COLORS.LIGHT_GRAY};\n  font-size: 18px;\n  margin-bottom: 10px;\n  padding-left: 5px;\n`;\n\nexport const Input = styled.input`\n  transition: 0.2s;\n  width: 100%;\n  padding-left: 15px;\n  border-radius: 15px;\n  height: 45px;\n  font-size: 16px;\n  margin-bottom: 20px;\n  background: ${COLORS.DEEP_BLUE};\n  border: 1px solid ${COLORS.BG};\n  color: ${COLORS.WHITE};\n\n  &::placeholder {\n    color: ${COLORS.GRAY};\n  }\n\n  &:focus {\n    border: 1px solid ${COLORS.PINK};\n  }\n`;\n","import React from 'react';\nimport { InputTypes } from '../../constants/inputTypes';\nimport { IInputRules } from '../../models/IInputRules';\nimport { InputType } from '../../types/inputType';\nimport * as UI from './styles';\n\ninterface IInputProps {\n  value: string;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  placeholder: string;\n  label: string;\n  rules?: IInputRules;\n  type?: InputType;\n  maxLength?: number;\n}\n\nconst Input: React.FC<IInputProps> = ({ value, onChange, placeholder, label, rules, type, maxLength }) => {\n  const digitsOnlyHandler = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (!rules || !rules.digitsOnly) return true;\n\n    if ((Number(e.key) >= 0 || Number(e.key) <= 9) && e.key !== ' ') {\n      return true;\n    }\n\n    return e.preventDefault();\n  };\n\n  return (\n    <UI.InputWrapper>\n      {label && <UI.Label>{label}</UI.Label>}\n      <UI.Input\n        value={value}\n        onChange={onChange}\n        onKeyPress={digitsOnlyHandler}\n        placeholder={placeholder}\n        type={type ? InputTypes.TEXT : type}\n        maxLength={maxLength}\n      />\n    </UI.InputWrapper>\n  );\n};\n\nexport default Input;\n","import styled from 'styled-components';\nimport { COLORS } from '../../constants/colors';\n\nexport const Button = styled.button`\n  transition: 0.2s;\n  cursor: pointer;\n  font-size: 18px;\n  width: 125px;\n  height: 50px;\n  background: ${COLORS.PINK};\n  border-radius: 15px;\n  color: ${COLORS.WHITE};\n\n  &:hover {\n    background: ${COLORS.LIGHT_PINK};\n  }\n\n  &:disabled {\n    cursor: unset;\n    background: ${COLORS.GRAY};\n  }\n`;\n","import React from 'react';\nimport * as UI from './styles';\n\ninterface IButtonProps {\n  value: string;\n  onClick: () => void;\n  disabled?: boolean;\n}\n\nconst Button: React.FC<IButtonProps> = ({ value, onClick, disabled }) => {\n  return (\n    <UI.Button onClick={onClick} disabled={disabled}>\n      {value}\n    </UI.Button>\n  );\n};\n\nexport default Button;\n","import styled from 'styled-components';\nimport { COLORS } from '../../constants/colors';\n\nexport const ModalWrapper = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: ${COLORS.MODAL_BG};\n`;\n\nexport const Modal = styled.div`\n  padding: 50px 25px;\n  border-radius: 25px;\n  background: ${COLORS.DEEP_BLUE};\n  display: flex;\n  flex-direction: column;\n  width: 550px;\n`;\n\nexport const ButtonsWrapper = styled.div`\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n  width: 100%;\n  margin-top: 15px;\n`;\n","import React from 'react';\nimport { GlobalValues } from '../../constants/globalValues';\nimport Button from '../Button';\nimport * as UI from './styles';\n\ninterface IModalProps {\n  children: React.ReactNode;\n  onSubmit: () => void;\n  onCancel: () => void;\n  submitDisabled: boolean;\n}\n\nconst Modal: React.FC<IModalProps> = ({ children, onSubmit, onCancel, submitDisabled }) => {\n  return (\n    <UI.ModalWrapper>\n      <UI.Modal>\n        {children}\n        <UI.ButtonsWrapper>\n          <Button value={GlobalValues.LOGIN} onClick={onSubmit} disabled={submitDisabled} />\n          <Button value={GlobalValues.CANCEL} onClick={onCancel} />\n        </UI.ButtonsWrapper>\n      </UI.Modal>\n    </UI.ModalWrapper>\n  );\n};\n\nexport default Modal;\n","import styled from 'styled-components';\nimport { COLORS } from '../../constants/colors';\n\nexport const BlockWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 500px;\n`;\n\nexport const OpenFormText = styled.p`\n  transition: 0.2s;\n  cursor: pointer;\n  color: ${COLORS.LIGHT_GRAY};\n  font-size: 18px;\n\n  &:hover {\n    color: ${COLORS.PINK};\n  }\n`;\n","import React, { useCallback, useMemo, useState } from 'react';\nimport { GlobalValues } from '../../constants/globalValues';\nimport { InputTypes } from '../../constants/inputTypes';\nimport { IUser } from '../../models/IUser';\nimport Input from '../../UI/Input';\nimport Modal from '../../UI/Modal';\nimport * as UI from './styles';\n\nconst AuthBlock: React.FC = () => {\n  const [login, setLogin] = useState<string>('');\n  const [password, setPassword] = useState<string>('');\n  const [modalOpened, setModalOpened] = useState<boolean>(false);\n\n  const submitDisabled = useMemo(() => !login || !password, [login, password]);\n\n  const sumbitAuthHandler = useCallback(() => {\n    const user: IUser = { login, password };\n    console.log(JSON.stringify(user));\n  }, [login, password]);\n\n  const closeModalHandler = useCallback(() => {\n    setLogin('');\n    setPassword('');\n    setModalOpened(false);\n  }, []);\n\n  const openModalHandler = useCallback(() => setModalOpened(true), []);\n\n  return (\n    <UI.BlockWrapper>\n      {modalOpened ? (\n        <Modal onSubmit={sumbitAuthHandler} onCancel={closeModalHandler} submitDisabled={submitDisabled}>\n          <Input\n            value={login}\n            onChange={(e) => setLogin(e.target.value)}\n            placeholder={GlobalValues.LOGIN}\n            label={GlobalValues.LOGIN}\n          />\n          <Input\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            placeholder={GlobalValues.PASSWORD}\n            label={GlobalValues.PASSWORD}\n            type={InputTypes.PASSWORD}\n            maxLength={4}\n            rules={{ digitsOnly: true }}\n          />\n        </Modal>\n      ) : (\n        <UI.OpenFormText onClick={openModalHandler}>Open Authorization Form</UI.OpenFormText>\n      )}\n    </UI.BlockWrapper>\n  );\n};\n\nexport default AuthBlock;\n","import styled from 'styled-components';\nimport { COLORS } from '../../constants/colors';\n\nexport const PageWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100vh;\n  background: ${COLORS.BG};\n`;\n","import React from 'react';\nimport AuthBlock from '../../components/AuthBlock';\nimport * as UI from './styles';\n\nconst MainPage: React.FC = () => {\n  return (\n    <UI.PageWrapper>\n      <AuthBlock />\n    </UI.PageWrapper>\n  );\n};\n\nexport default MainPage;\n","import React from 'react';\nimport MainPage from './pages/MainPage';\n\nfunction App() {\n  return <MainPage />;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}